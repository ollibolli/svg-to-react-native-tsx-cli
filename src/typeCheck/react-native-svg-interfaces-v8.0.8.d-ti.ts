/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from "ts-interface-checker";
// tslint:disable:object-literal-key-quotes

export const NumberProp = t.union("string", "number");

export const FillRule = t.union(t.lit('evenodd'), t.lit('nonzero'));

export const Units = t.union(t.lit('userSpaceOnUse'), t.lit('objectBoundingBox'));

export const TextAnchor = t.union(t.lit('start'), t.lit('middle'), t.lit('end'));

export const FontStyle = t.union(t.lit('normal'), t.lit('italic'), t.lit('oblique'));

export const FontVariant = t.union(t.lit('normal'), t.lit('small-caps'));

export const FontWeight = t.union(t.lit('normal'), t.lit('bold'), t.lit('bolder'), t.lit('lighter'), t.lit('100'), t.lit('200'), t.lit('300'), t.lit('400'), t.lit('500'), t.lit('600'), t.lit('700'), t.lit('800'), t.lit('900'));

export const FontStretch = t.union(t.lit('normal'), t.lit('wider'), t.lit('narrower'), t.lit('ultra-condensed'), t.lit('extra-condensed'), t.lit('condensed'), t.lit('semi-condensed'), t.lit('semi-expanded'), t.lit('expanded'), t.lit('extra-expanded'), t.lit('ultra-expanded'));

export const TextDecoration = t.union(t.lit('none'), t.lit('underline'), t.lit('overline'), t.lit('line-through'), t.lit('blink'));

export const FontVariantLigatures = t.union(t.lit('normal'), t.lit('none'));

export const AlignmentBaseline = t.union(t.lit('baseline'), t.lit('text-bottom'), t.lit('alphabetic'), t.lit('ideographic'), t.lit('middle'), t.lit('central'), t.lit('mathematical'), t.lit('text-top'), t.lit('bottom'), t.lit('center'), t.lit('top'), t.lit('text-before-edge'), t.lit('text-after-edge'), t.lit('before-edge'), t.lit('after-edge'), t.lit('hanging'));

export const BaselineShift = t.union(t.lit('sub'), t.lit('super'), t.lit('baseline'), "NumberProp");

export const LengthAdjust = t.union(t.lit('spacing'), t.lit('spacingAndGlyphs'));

export const TextPathMethod = t.union(t.lit('align'), t.lit('stretch'));

export const TextPathSpacing = t.union(t.lit('auto'), t.lit('exact'));

export const TextPathMidLine = t.union(t.lit('sharp'), t.lit('smooth'));

export const Linecap = t.union(t.lit('butt'), t.lit('square'), t.lit('round'));

export const Linejoin = t.union(t.lit('miter'), t.lit('bevel'), t.lit('round'));

export const TouchableProps = t.iface([], {
  "disabled": t.opt("boolean"),
  "onPress": t.opt(t.func("any", t.param("event", "any"))),
  "onPressIn": t.opt(t.func("any", t.param("event", "any"))),
  "onPressOut": t.opt(t.func("any", t.param("event", "any"))),
  "onLongPress": t.opt(t.func("any", t.param("event", "any"))),
  "delayPressIn": t.opt("number"),
  "delayPressOut": t.opt("number"),
  "delayLongPress": t.opt("number"),
});

export const FillProps = t.iface([], {
  "fill": t.opt("string"),
  "fillOpacity": t.opt("NumberProp"),
  "fillRule": t.opt("FillRule"),
});

export const ClipProps = t.iface([], {
  "clipRule": t.opt("FillRule"),
  "clipPath": t.opt("string"),
});

export const DefinitionProps = t.iface([], {
  "id": t.opt("string"),
});

export const StrokeProps = t.iface([], {
  "stroke": t.opt("string"),
  "strokeWidth": t.opt("NumberProp"),
  "strokeOpacity": t.opt("NumberProp"),
  "strokeDasharray": t.opt(t.union("number", "string")),
  "strokeDashoffset": t.opt("NumberProp"),
  "strokeLinecap": t.opt("Linecap"),
  "strokeLinejoin": t.opt("Linejoin"),
  "strokeMiterlimit": t.opt("NumberProp"),
});

export const FontObject = t.iface([], {
  "fontStyle": t.opt("FontStyle"),
  "fontVariant": t.opt("FontVariant"),
  "fontWeight": t.opt("FontWeight"),
  "fontStretch": t.opt("FontStretch"),
  "fontSize": t.opt("NumberProp"),
  "fontFamily": t.opt("string"),
  "textAnchor": t.opt("TextAnchor"),
  "textDecoration": t.opt("TextDecoration"),
  "letterSpacing": t.opt("NumberProp"),
  "wordSpacing": t.opt("NumberProp"),
  "kerning": t.opt("NumberProp"),
  "fontVariantLigatures": t.opt("FontVariantLigatures"),
});

export const FontProps = t.iface(["FontObject"], {
  "font": t.opt("FontObject"),
});

export const TransformObject = t.iface([], {
  "scale": t.opt("NumberProp"),
  "scaleX": t.opt("NumberProp"),
  "scaleY": t.opt("NumberProp"),
  "rotate": t.opt("NumberProp"),
  "rotation": t.opt("NumberProp"),
  "translate": t.opt("NumberProp"),
  "translateX": t.opt("NumberProp"),
  "translateY": t.opt("NumberProp"),
  "x": t.opt("NumberProp"),
  "y": t.opt("NumberProp"),
  "origin": t.opt("NumberProp"),
  "originX": t.opt("NumberProp"),
  "originY": t.opt("NumberProp"),
  "skew": t.opt("NumberProp"),
  "skewX": t.opt("NumberProp"),
  "skewY": t.opt("NumberProp"),
});

export const TransformProps = t.iface(["TransformObject"], {
  "transform": t.opt(t.union("string", "TransformObject")),
});

export const CommonMaskProps = t.iface([], {
  "mask": t.opt("string"),
});

export const CommonPathProps = t.iface(["FillProps", "StrokeProps", "ClipProps", "TransformProps", "TouchableProps", "DefinitionProps", "CommonMaskProps"], {
});

export const CircleProps = t.iface(["CommonPathProps"], {
  "cx": t.opt("NumberProp"),
  "cy": t.opt("NumberProp"),
  "opacity": t.opt("NumberProp"),
  "r": t.opt("NumberProp"),
});

export const ClipPathProps = t.iface([], {
  "id": "string",
});

export const EllipseProps = t.iface(["CommonPathProps"], {
  "cx": t.opt("NumberProp"),
  "cy": t.opt("NumberProp"),
  "opacity": t.opt("NumberProp"),
  "rx": t.opt("NumberProp"),
  "ry": t.opt("NumberProp"),
});

export const GProps = t.iface(["CommonPathProps"], {
  "opacity": t.opt("NumberProp"),
});

export const ImageProps = t.iface(["TouchableProps"], {
  "x": t.opt("NumberProp"),
  "y": t.opt("NumberProp"),
  "width": t.opt("NumberProp"),
  "height": t.opt("NumberProp"),
  "href": "string",
  "preserveAspectRatio": t.opt("string"),
  "opacity": t.opt("NumberProp"),
});

export const LineProps = t.iface(["CommonPathProps"], {
  "opacity": t.opt("NumberProp"),
  "x1": t.opt("NumberProp"),
  "x2": t.opt("NumberProp"),
  "y1": t.opt("NumberProp"),
  "y2": t.opt("NumberProp"),
});

export const LinearGradientProps = t.iface([], {
  "x1": t.opt("NumberProp"),
  "x2": t.opt("NumberProp"),
  "y1": t.opt("NumberProp"),
  "y2": t.opt("NumberProp"),
  "gradientUnits": t.opt("Units"),
  "id": "string",
});

export const PathProps = t.iface(["CommonPathProps"], {
  "d": "string",
  "opacity": t.opt("NumberProp"),
});

export const PatternProps = t.iface([], {
  "id": "string",
  "x": t.opt("NumberProp"),
  "y": t.opt("NumberProp"),
  "width": t.opt("NumberProp"),
  "height": t.opt("NumberProp"),
  "patternTransform": t.opt("string"),
  "patternUnits": t.opt("Units"),
  "patternContentUnits": t.opt("Units"),
  "viewBox": t.opt("string"),
  "preserveAspectRatio": t.opt("string"),
});

export const PolygonProps = t.iface(["CommonPathProps"], {
  "opacity": t.opt("NumberProp"),
  "points": t.union("string", "any"),
});

export const PolylineProps = t.iface(["CommonPathProps"], {
  "opacity": t.opt("NumberProp"),
  "points": t.union("string", "any"),
});

export const RadialGradientProps = t.iface([], {
  "fx": t.opt("NumberProp"),
  "fy": t.opt("NumberProp"),
  "rx": t.opt("NumberProp"),
  "ry": t.opt("NumberProp"),
  "cx": t.opt("NumberProp"),
  "cy": t.opt("NumberProp"),
  "r": t.opt("NumberProp"),
  "gradientUnits": t.opt("Units"),
  "id": "string",
});

export const RectProps = t.iface(["CommonPathProps"], {
  "x": t.opt("NumberProp"),
  "y": t.opt("NumberProp"),
  "width": t.opt("NumberProp"),
  "height": t.opt("NumberProp"),
  "rx": t.opt("NumberProp"),
  "ry": t.opt("NumberProp"),
  "class": t.opt("string"),
  "opacity": t.opt("NumberProp"),
});

export const StopProps = t.iface([], {
  "stopColor": t.opt("string"),
  "stopOpacity": t.opt("NumberProp"),
  "offset": t.opt("string"),
});

export const SvgProps = t.iface([], {
  "width": t.opt("NumberProp"),
  "height": t.opt("NumberProp"),
  "viewBox": t.opt("string"),
  "preserveAspectRatio": t.opt("string"),
});

export const SymbolProps = t.iface([], {
  "id": "string",
  "viewBox": t.opt("string"),
  "preserveAspectRatio": t.opt("string"),
  "opacity": t.opt("NumberProp"),
});

export const TSpanProps = t.iface(["CommonPathProps", "FontProps"], {
  "dx": t.opt("NumberProp"),
  "dy": t.opt("NumberProp"),
});

export const TextSpecificProps = t.iface(["CommonPathProps", "FontProps"], {
  "alignmentBaseline": t.opt("AlignmentBaseline"),
  "baselineShift": t.opt("BaselineShift"),
  "verticalAlign": t.opt("NumberProp"),
  "lengthAdjust": t.opt("LengthAdjust"),
  "textLength": t.opt("NumberProp"),
  "fontData": t.opt(t.union("null", "any")),
  "fontFeatureSettings": t.opt("string"),
});

export const TextProps = t.iface(["TextSpecificProps"], {
  "dx": t.opt("NumberProp"),
  "dy": t.opt("NumberProp"),
  "opacity": t.opt("NumberProp"),
});

export const TextPathProps = t.iface(["TextSpecificProps"], {
  "href": "string",
  "startOffset": t.opt("NumberProp"),
  "method": t.opt("TextPathMethod"),
  "spacing": t.opt("TextPathSpacing"),
  "midLine": "TextPathMidLine",
});

export const UseProps = t.iface(["CommonPathProps"], {
  "href": "string",
  "width": t.opt("string"),
  "height": t.opt("string"),
  "x": t.opt("NumberProp"),
  "y": t.opt("NumberProp"),
  "opacity": t.opt("NumberProp"),
});

export const EMaskUnits = t.enumtype({
  "USER_SPACE_ON_USE": "userSpaceOnUse",
  "OBJECT_BOUNDING_BOX": "objectBoundingBox",
});

export const TMaskUnits = t.union(t.enumlit("EMaskUnits", "USER_SPACE_ON_USE"), t.enumlit("EMaskUnits", "OBJECT_BOUNDING_BOX"));

export const MaskProps = t.iface(["CommonPathProps"], {
  "id": "string",
  "x": t.opt("NumberProp"),
  "y": t.opt("NumberProp"),
  "width": t.opt("NumberProp"),
  "height": t.opt("NumberProp"),
  "maskTransform": t.opt("string"),
  "maskUnits": t.opt("TMaskUnits"),
  "maskContentUnits": t.opt("TMaskUnits"),
});

const exportedTypeSuite: t.ITypeSuite = {
  NumberProp,
  FillRule,
  Units,
  TextAnchor,
  FontStyle,
  FontVariant,
  FontWeight,
  FontStretch,
  TextDecoration,
  FontVariantLigatures,
  AlignmentBaseline,
  BaselineShift,
  LengthAdjust,
  TextPathMethod,
  TextPathSpacing,
  TextPathMidLine,
  Linecap,
  Linejoin,
  TouchableProps,
  FillProps,
  ClipProps,
  DefinitionProps,
  StrokeProps,
  FontObject,
  FontProps,
  TransformObject,
  TransformProps,
  CommonMaskProps,
  CommonPathProps,
  CircleProps,
  ClipPathProps,
  EllipseProps,
  GProps,
  ImageProps,
  LineProps,
  LinearGradientProps,
  PathProps,
  PatternProps,
  PolygonProps,
  PolylineProps,
  RadialGradientProps,
  RectProps,
  StopProps,
  SvgProps,
  SymbolProps,
  TSpanProps,
  TextSpecificProps,
  TextProps,
  TextPathProps,
  UseProps,
  EMaskUnits,
  TMaskUnits,
  MaskProps,
};
export default exportedTypeSuite;
